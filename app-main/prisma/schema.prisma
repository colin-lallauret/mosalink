// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Domain {
  id                String     @id @default(cuid())
  name              String     @unique
  url               String     @unique
  isPublish         Boolean    @default(false)
  maximumCategories Int        @default(10)
  categories        Category[]
  users             User[]
  bookmark          Bookmark[]
  creationDate      DateTime   @default(now())
  lastUpdateDate    DateTime   @updatedAt
}

model User {
  id             String     @id @default(cuid())
  name           String?
  email          String?    @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  role           Role       @default(USER)
  isBanned       Boolean    @default(false)
  domain         Domain     @relation(fields: [domainId], references: [id])
  domainId       String     @default("clkgzh6ep0000x9im9ze8s653")
  creationDate   DateTime   @default(now())
  lastUpdateDate DateTime   @updatedAt
  bookmark       Bookmark[]
  folders        Folder[]
}

model Category {
  id             String     @id @default(cuid())
  name           String
  url            String
  isPublish      Boolean    @default(true)
  domain         Domain     @relation(fields: [domainId], references: [id])
  domainId       String
  creationDate   DateTime   @default(now())
  lastUpdateDate DateTime   @updatedAt
  Bookmark       Bookmark[]
}

model Bookmark {
  id             String   @id @default(cuid())
  title          String
  description    String
  url            String
  tags           String[]
  image          String?
  domain         Domain   @relation(fields: [domainId], references: [id])
  domainId       String
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  category       Category @relation(fields: [categoryId], references: [id])
  categoryId     String
  folders        Folder[]
  creationDate   DateTime @default(now())
  lastUpdateDate DateTime @updatedAt
}

model Folder {
  id            String     @id @default(cuid())
  name          String
  url           String     @unique
  isPublish     Boolean    @default(false)
  publicUrl     String?
  users         User[]
  userCreatorId String
  bookmarks     Bookmark[]
}

enum Role {
  USER
  MODERATOR
  ADMIN
  SUPER_ADMIN
}
